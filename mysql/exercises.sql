-------------------------------FUNCTION------------------------------------
source script.sql  --–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
show warnings
show databases
show tables
show columns from employee  --–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
desc bank.employee          --–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
select count(*) from employee   -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
select count(distinct gender) from employee


CAST(obj AS INT)  -- –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤;


--------------------------------NUMBER FUNCTIONS-----------------------------------------
MOD(float N, float M) -- –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è N –Ω–∞ M;
POW(float N, float M) -- –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å;

CEIL(), FLOOR() -- –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ 1)–≤–≤–µ—Ä—Ö, 2)–≤–Ω–∏–∑;

ROUND(float N, int digits) -- –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∏—Å–ª–∞ —Ä–∞–∑—Ä—è–¥–æ–≤ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–æ—á–∫–∏,
    -- –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ (2 –∞—Ä–≥. –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π);
TRUNCATE(float N, int digits) -- –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–µ–∫–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ 
    -- —Ä–∞–∑—Ä—è–¥–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏;
-- –í ROUND() –∏ TRUNCATE() –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å 2-–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —Å –º–∏–Ω—É—Å–æ–º,
-- –æ–∑–Ω–∞—á–∞–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ/—É—Å–µ—á–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –æ—Ç —Ç–æ—á–∫–∏.

SIGN(float N) -- -> 1 –µ—Å–ª–∏ N > 0, -1 –µ—Å–ª–∏ N < 0, 0 –µ—Å–ª–∏ N = 0;
ABS(float N)  -- -> –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ;



--------------------------------STRING FUNCTIONS-----------------------------------------
LOWER(string)   -- -> low-case —Å—Ç—Ä–æ–∫–∞;
UPPER(string)   -- -> up-case —Å—Ç—Ä–æ–∫–∞;
LENGTH(string)  -- -> –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–∏–ª–∏ –∫–æ–ª-–≤–æ —Ü–∏—Ñ—Ä);
QUOTE(string)   -- -> —Å—Ç—Ä–æ–∫–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö;
ASCII(char ch)  -- -> –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞;
CHAR(int... codes)  -- -> —Å—Ç—Ä–æ–∫–∞ –ø–æ –∫–æ–¥–∞–º —Å–∏–º–≤–æ–ª–æ–≤;
CONCAT(string... strs)  -- –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫;
POSITION(string IN str_field) -- -> –ø–æ–∑–∏—Ü–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1);
LOCATE(string, str_field, int pos) -- –∫–∞–∫ POSITION(), –Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞—á. –ø–æ–∑–∏—Ü–∏—é;
STRCMP(string, string) -- –∫–∞–∫ –≤ –°–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞;
INSERT(string, int pos, int count, string) -- –∑–∞–º–µ–Ω—è–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ —Å –ø–æ–∑–∏—Ü–∏–∏ pos, count
    -- —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ï—Å–ª–∏ count = 0, —Ç–æ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è;
SUBSTR(string, int pos, int count) -- -> –ø–æ–¥—Å—Ç—Ä–æ–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏; 

LEFT()
RIGHT()


---------------------------------DATE FUNCTIONS------------------------------------------
utc_timestamp()
SELECT @@global.time_zone, @@session.time_zone;
SET time_zone = 'Europe/Zurich';
select * from mysql.time_zone_name;

CAST('2012-05-26' AS DATETIME)  -- –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤;
STR_TO_DATE()

NOW(), CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP()

DATE_ADD()



YEAR()
MONTH()
MONTHNAME()

EXTRACT(YEAR FROM start_date)


-------------------------------AGGREGATING FUNCTIONS-------------------------------------
count(), sum(), min(), max(), avg()



---------------------------------------------------------------------------



----------------------------------- SAMPLES-------------------------------
-- –ü–æ–∫–∞–∑–∞—Ç—å FK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:
SELECT CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, REFERENCED_TABLE_NAME,
    REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE REFERENCED_TABLE_SCHEMA = 'bank' AND 
    (REFERENCED_TABLE_NAME = 'employee' OR TABLE_NAME = 'employee');


-- –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–∞–±–ª–∏—Ü–µ:
SELECT TABLE_COMMENT
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'bank' AND TABLE_NAME = 'individual';


-- –ü–æ–∫–∞–∑–∞—Ç—å —é–∑–µ—Ä–æ–≤ –∏ –∏—Ö –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏
SELECT user FROM mysql.user;
show grants for slice@localhos
---------------------------------------------------------------------------

SHOW PROCEDURE STATUS;
SHOW FUNCTION STATUS;
---------------------------------------------------------------------------


GRANT ALL PRIVILEGES ON `check_book`.* TO slice@'%' IDENTIFIED BY 'codeslice256';  -- —Ö–∑ —á—Ç–æ —ç—Ç–æ –Ω–µ–ø–æ–º–Ω—é
---------------------------------------------------------------------------






-- –ê–ª–∞–Ω –ë—å—é–ª–∏ - –ò–∑—É—á–∞–µ–º SQL (2007):
-- 3.1
SELECT emp_id, fname, lname FROM employee ORDER BY lname, fname;

-- 3.2
SELECT account_id, cust_id, avail_balance FROM account
WHERE status = 'ACTIVE' AND avail_balance > 2500;

-- 3.3
SELECT DISTINCT open_emp_id FROM account;

-- 3.4
SELECT p.product_cd, a.cust_id, a.avail_balance
FROM product p 
INNER JOIN account a ON p.product_cd = a.product_cd
WHERE p.product_type_cd = 'ACCOUNT';



-- 4.3
SELECT * FROM account WHERE YEAR(open_date) = 2002;
SELECT * FROM account WHERE open_date BETWEEN '2002-01-01' AND '2002-12-31';

-- 4.4
SELECT * FROM individual WHERE lname LIKE '_a%e%';
SELECT * FROM individual WHERE lname REGEXP '^.a.*e';



-- 5.1
SELECT e.emp_id, e.fname, e.lname, b.name
FROM employee e 
INNER JOIN branch b ON e.assigned_branch_id = b.branch_id;

-- 5.2
SELECT a.account_id, c.fed_id, p.name product_name
FROM account a
INNER JOIN customer c ON a.cust_id = c.cust_id
INNER JOIN product p ON a.product_cd = p.product_cd
WHERE c.cust_type_cd = 'I';

-- 5.3
SELECT e1.emp_id, e1.fname, e1.lname
FROM employee e1
INNER JOIN employee e2 ON e1.superior_emp_id = e2.emp_id
WHERE e1.dept_id != e2.dept_id;



-- 6.1
/*
 A = {L M N O P}
 B = {P Q R S T}

 A union B = {L M N O P Q R S T}
 A union all B = {L M N O P P Q R S T}
 A intersect B = {P}
 A expect B = {L M N O}
*/

-- 6.2
SELECT fname, lname FROM individual
UNION
SELECT fname, lname FROM employee;

-- 6.3
SELECT fname, lname FROM individual
UNION ALL
SELECT fname, lname FROM employee
ORDER BY lname;



-- 7.1
SELECT SUBSTR('Please find the substring in this string', 17, 9);
SELECT POSITION('substring' IN 'Please find the substring in this string');

-- 7.2
SELECT ABS(-25.76823), SIGN(-25.76823), ROUND(-25.76823, 2);

-- 7.3
SELECT MONTH(NOW()), MONTHNAME(NOW());
SELECT EXTRACT(MONTH FROM CURRENT_DATE());



-- 8.1
SELECT COUNT(*) rows FROM account;

-- 8.2
SELECT  acc.cust_id, ind.fname, COUNT(*) AS accounts
FROM account AS acc
LEFT JOIN individual AS ind ON acc.cust_id = ind.cust_id
GROUP BY acc.cust_id;

-- 8.3
SELECT  acc.cust_id, ind.fname, COUNT(*) AS accounts
FROM account AS acc
LEFT JOIN individual AS ind ON acc.cust_id = ind.cust_id
GROUP BY acc.cust_id
HAVING accounts >= 2
ORDER BY accounts;

-- 8.4
SELECT a.product_cd, b.name AS branch, SUM(a.avail_balance) balance
FROM account AS a
INNER JOIN branch AS b ON a.open_branch_id = b.branch_id
GROUP BY a.product_cd, a.open_branch_id
HAVING COUNT(*) > 1
ORDER BY balance DESC;


-- –ù–ï –ü–†–û–í–ï–†–ï–ù–û ü°áü°áü°á

-- 9.1
SELECT a.account_id, a.product_cd, a.cust_id, a.avail_balance FROM account AS a
WHERE a.product_cd IN (SELECT product_cd FROM product
    WHERE product_type_cd = 'LOAN');

-- 9.2
SELECT a.account_id, a.product_cd, a.cust_id, a.avail_balance FROM account AS a
WHERE 'LOAN' = (SELECT product_type_cd FROM product AS p
    WHERE p.product_cd = a.product_cd);


-- 9.3 (–ù–ï –°–ú–û–ì –°–î–ï–õ–ê–¢–¨ –° –ü–û–î–ó–ê–ü–†–û–°–û–ú)
SELECT emp.emp_id, emp.fname, cv.name FROM employee AS emp
INNER JOIN
(SELECT 'trainee' name, '2004-01-01' start_dt, '2005-12-31' end_dt
UNION ALL
SELECT 'worker' name, '2002-01-01' start_dt, '2003-12-31' end_dt
UNION ALL
SELECT 'mentor' name, '2000-01-01' start_dt, '2001-12-31' end_dt) AS cv 
    ON emp.start_date BETWEEN cv.start_dt and end_dt;